{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bundle.js","src/ts/components/buttons/buttons.ts","src/ts/components/forms/inputs.ts","src/ts/layout/data.ts","src/ts/layout/keypad.ts","src/ts/main.ts","src/ts/pages/dialpad.ts","src/ts/utilities/longPress.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","__importDefault","mod","__esModule","default","value","longPress_1","DialpadButton","config","instance","TypeError","_classCallCheck","this","undefined","subtitle","onLongPress","parentElement","appendChild","skeleton","get","_this","button","document","createElement","id","classList","add","setAttribute","ariaLabel","titleElement","subtitleElement","apply","onLongPressCallback","onPressStart","onClick","title","onLongPressCancel","addEventListener","innerText","_a","namespace","getElementById","InputElement","focused","focus","querySelector","currentValue","currentCaretPosition","caretPosition","updatedValue","slice","updatedCaretPosition","count","arguments","beforeCaretValue","afterCaretValue","endIndex","inputEventHandler","removeValue","insertValue","caretPositionBeforeRemoveUnwantedChars","updatedValueAfterRemoveUnwantedChars","replace","validation","console","log","onValueEmpty","onValueNonEmpty","input","className","name","type","autofocus","inputMode","autocomplete","bind","makeSureFocused","selectionStart","set","position","selectionEnd","activeElement","buttons_1","data_1","Keypad","iconName","iconElement","backspaceButtonElement","disabled","keypad","forEach","onKeypadBtnClick","onZeroBtnLongPress","onZeroBtnLongPressCancel","build","callButton","backspaceButton","callBtn","getMaterialIcon","onCallBtnClick","backspaceBtn","onBackspaceBtnClick","onBackspaceBtnLongPress","dialpad_1","window","onload","body","inputs_1","keypad_1","Dialpad","dialpad","inputFieldLayout","keypadLayout","element","remove","inputField","disableBackspaceButton","enableBackspaceButton","_this2","replaceValue","recentCallOnNumber","LongPressEvent","isHeld","activeHoldTimeoutId","longPressTimeout","onHoldStart","onHoldEnd","setTimeout","clearTimeout"],"mappings":"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","file":"../bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",null,"import LongPressEvent from '../../utilities/longPress';\r\nimport DialpadButtonConfig from './type';\r\n\r\n/**\r\n *\r\n * Dialpad Button\r\n *\r\n */\r\nexport default class DialpadButton {\r\n  // button config\r\n  private config: DialpadButtonConfig;\r\n\r\n  /**\r\n   *\r\n   * construct DialpadButton instance\r\n   *\r\n   */\r\n  constructor(config: DialpadButtonConfig) {\r\n    // config assertion\r\n    if (config.subtitle === undefined && config.onLongPress !== undefined) {\r\n      throw new Error('Invalid config for dialPad button');\r\n    }\r\n\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Dialpad button skeleton\r\n   *\r\n   */\r\n  private get skeleton(): HTMLButtonElement {\r\n    const button = document.createElement('button');\r\n    button.id = this.id;\r\n    button.classList.add('dialpad-btn');\r\n    button.setAttribute('aria-label', this.config.ariaLabel);\r\n\r\n    // append title\r\n    button.appendChild(this.titleElement);\r\n\r\n    // append subtitle\r\n    button.appendChild(this.subtitleElement);\r\n\r\n    // apply long press event\r\n    if (this.config.onLongPress !== undefined) {\r\n      LongPressEvent.apply({\r\n        target: button,\r\n        onLongPressCallback: () => {\r\n          this.config.onLongPress!(this.config.subtitle!);\r\n        },\r\n        onPressStart: () => {\r\n          this.config.onClick(this.config.title);\r\n        },\r\n        onLongPressCancel: this.config.onLongPressCancel,\r\n      });\r\n    } else {\r\n      // add click event listener\r\n      button.addEventListener('click', () => {\r\n        this.config.onClick(this.config.title);\r\n      });\r\n    }\r\n\r\n    return button;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Dialpad button tile element\r\n   *\r\n   */\r\n  private get titleElement(): HTMLElement {\r\n    const title = document.createElement('h1');\r\n    title.classList.add('dialpad-btn__title');\r\n    title.innerText = this.config.title;\r\n    return title;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Dialpad button subtile\r\n   *\r\n   */\r\n  private get subtitleElement(): HTMLElement {\r\n    const subtitle = document.createElement('p');\r\n    subtitle.classList.add('dialpad-btn__subtitle');\r\n    subtitle.innerText = this.config.subtitle ?? '';\r\n    return subtitle;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Unique id for dialpad button\r\n   *\r\n   */\r\n  get id() {\r\n    return `dialpad-btn-${this.config.namespace}`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Dialpad button query selector for dom manipulation\r\n   *\r\n   */\r\n  get querySelector(): HTMLButtonElement {\r\n    return document.getElementById(this.id)! as HTMLButtonElement;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Appends dialpad button to a specified parent element.\r\n   *\r\n   * @param parentElement\r\n   *\r\n   */\r\n  build(parentElement: HTMLElement) {\r\n    parentElement.appendChild(this.skeleton);\r\n  }\r\n}\r\n","import { InputElementConfig } from './types';\r\n\r\n/**\r\n *\r\n * Input Element\r\n *\r\n */\r\nexport default class InputElement {\r\n  // input element config\r\n  private config: InputElementConfig;\r\n\r\n  /**\r\n   *\r\n   * construct InputElement instance\r\n   *\r\n   */\r\n  constructor(config: InputElementConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * input element skeleton\r\n   *\r\n   */\r\n  private get skeleton(): HTMLInputElement {\r\n    const input = document.createElement('input');\r\n    input.id = this.id;\r\n    input.className = 'input-element';\r\n    input.name = 'number';\r\n    input.type = 'text';\r\n    input.autofocus = true;\r\n    input.inputMode = 'none';\r\n    input.autocomplete = 'off';\r\n\r\n    // add input event listener\r\n    input.addEventListener('input', this.inputEventHandler.bind(this));\r\n\r\n    return input;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Input element query selector for dom manipulation\r\n   *\r\n   */\r\n  get querySelector(): HTMLInputElement {\r\n    return document.getElementById(this.id) as HTMLInputElement;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Unique id for input element\r\n   *\r\n   * @returns {string}\r\n   *\r\n   */\r\n  get id(): string {\r\n    return `input-${this.config.namespace}`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Appends input element to a specified parent element.\r\n   *\r\n   * @param parentElement\r\n   *\r\n   */\r\n  build(parentElement: HTMLElement) {\r\n    parentElement.appendChild(this.skeleton);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Make sure input element is focused\r\n   *\r\n   */\r\n  makeSureFocused() {\r\n    if (!this.focused) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Get input element caret position\r\n   *\r\n   */\r\n  get caretPosition(): number {\r\n    // make sure the input is focused\r\n    this.makeSureFocused();\r\n    return this.querySelector.selectionStart!;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Set input element caret position\r\n   *\r\n   * @param position - desired caret position index value\r\n   *\r\n   */\r\n  set caretPosition(position: number) {\r\n    // make sure the input is focused\r\n    this.makeSureFocused();\r\n\r\n    // set selection\r\n    this.querySelector.selectionStart = position;\r\n    this.querySelector.selectionEnd = position;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * To check whether the input element is focused or not\r\n   *\r\n   */\r\n  get focused(): boolean {\r\n    return document.activeElement === this.querySelector;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * To get input element value\r\n   *\r\n   */\r\n  get value(): string {\r\n    return this.querySelector.value;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * To set input element value\r\n   *\r\n   * @param value - The value to set\r\n   *\r\n   */\r\n  set value(value: string) {\r\n    this.querySelector.value = value;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Focus input element\r\n   *\r\n   */\r\n  focus() {\r\n    this.querySelector.focus();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Insert a value at the caret position\r\n   *\r\n   * @param value - The value to be inserted\r\n   *\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  insertValue(value: string) {\r\n    // capture current state\r\n    const currentValue = this.value;\r\n    const currentCaretPosition = this.caretPosition;\r\n\r\n    // prepare updated state\r\n    const updatedValue =\r\n      currentValue.slice(0, currentCaretPosition) +\r\n      value +\r\n      currentValue.slice(currentCaretPosition);\r\n    const updatedCaretPosition = currentCaretPosition + value.length;\r\n\r\n    // update state\r\n    this.value = updatedValue;\r\n    this.caretPosition = updatedCaretPosition;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Remove characters from the value starting at the caret position\r\n   *\r\n   * @param count - The number of characters, default value is 1\r\n   *\r\n   */\r\n  removeValue(count: number = 1) {\r\n    // capture current state\r\n    const currentValue = this.value;\r\n    const currentCaretPosition = this.caretPosition;\r\n\r\n    // prepare updated state\r\n    const beforeCaretValue = currentValue.slice(0, currentCaretPosition);\r\n\r\n    // if before caret value is empty do nothing\r\n    if (beforeCaretValue !== '') {\r\n      const afterCaretValue = currentValue.slice(currentCaretPosition);\r\n      const endIndex = beforeCaretValue.length - count;\r\n      const updatedValue =\r\n        beforeCaretValue.slice(0, endIndex) + afterCaretValue;\r\n      const updatedCaretPosition = currentCaretPosition - count;\r\n\r\n      // update state\r\n      this.value = updatedValue;\r\n      this.caretPosition = updatedCaretPosition;\r\n\r\n      // check empty or not\r\n      this.inputEventHandler();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param value - The value to be replaced current last value\r\n   *\r\n   */\r\n  replaceValue(value: string) {\r\n    this.removeValue();\r\n    this.insertValue(value);\r\n    this.inputEventHandler();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Clear the value of input element\r\n   *\r\n   */\r\n  clear() {\r\n    this.value = '';\r\n    this.focus();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Remove unwanted symbols and allow only digits, +, *, and #\r\n   *\r\n   */\r\n  validation() {\r\n    // prepare updated state\r\n    const caretPositionBeforeRemoveUnwantedChars = this.caretPosition;\r\n    const updatedValueAfterRemoveUnwantedChars = this.value.replace(\r\n      /[^0-9+*#]/g,\r\n      ''\r\n    );\r\n    const updatedCaretPosition =\r\n      caretPositionBeforeRemoveUnwantedChars +\r\n      updatedValueAfterRemoveUnwantedChars.length -\r\n      this.value.length;\r\n\r\n    // update state\r\n    this.value = updatedValueAfterRemoveUnwantedChars;\r\n    this.caretPosition = updatedCaretPosition;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * `input` event handler\r\n   *\r\n   */\r\n  private inputEventHandler() {\r\n    // Remove unwanted symbols and allow only digits, +, *, and #\r\n    this.validation();\r\n\r\n    // check whether the value is empty or not, and act accordingly.\r\n    if (this.value === '') {\r\n      // eslint-disable-next-line no-console\r\n      console.log('value empty');\r\n      this.config.onValueEmpty();\r\n    } else {\r\n      // eslint-disable-next-line no-console\r\n      console.log('value non empty');\r\n      this.config.onValueNonEmpty();\r\n    }\r\n  }\r\n}\r\n","import { KeypadButtonData } from './types';\r\n\r\n/**\r\n *\r\n * Keypad buttons data\r\n *\r\n */\r\nconst KEYPAD_BUTTONS_DATA: Array<KeypadButtonData> = [\r\n  {\r\n    namespace: 'one',\r\n    ariaLabel: 'One',\r\n    title: '1',\r\n  },\r\n  {\r\n    namespace: 'two',\r\n    ariaLabel: 'Two',\r\n    title: '2',\r\n    subtitle: 'ABC',\r\n  },\r\n  {\r\n    namespace: 'three',\r\n    ariaLabel: 'Three',\r\n    title: '3',\r\n    subtitle: 'DEF',\r\n  },\r\n  {\r\n    namespace: 'four',\r\n    ariaLabel: 'Four',\r\n    title: '4',\r\n    subtitle: 'GHI',\r\n  },\r\n  {\r\n    namespace: 'five',\r\n    ariaLabel: 'Five',\r\n    title: '5',\r\n    subtitle: 'JKL',\r\n  },\r\n  {\r\n    namespace: 'six',\r\n    ariaLabel: 'Six',\r\n    title: '6',\r\n    subtitle: 'MNO',\r\n  },\r\n  {\r\n    namespace: 'seven',\r\n    ariaLabel: 'Seven',\r\n    title: '7',\r\n    subtitle: 'PQRS',\r\n  },\r\n  {\r\n    namespace: 'eight',\r\n    ariaLabel: 'Eight',\r\n    title: '8',\r\n    subtitle: 'TUV',\r\n  },\r\n  {\r\n    namespace: 'nine',\r\n    ariaLabel: 'Nine',\r\n    title: '9',\r\n    subtitle: 'WXYZ',\r\n  },\r\n  {\r\n    namespace: 'star',\r\n    ariaLabel: 'Star',\r\n    title: '*',\r\n  },\r\n  {\r\n    namespace: 'zero',\r\n    ariaLabel: 'Zero',\r\n    title: '0',\r\n    subtitle: '+',\r\n  },\r\n  {\r\n    namespace: 'hash',\r\n    ariaLabel: 'Hash',\r\n    title: '#',\r\n  },\r\n];\r\n\r\nexport default KEYPAD_BUTTONS_DATA;\r\n","import DialpadButton from '../components/buttons/buttons';\r\nimport LongPressEvent from '../utilities/longPress';\r\nimport KEYPAD_BUTTONS_DATA from './data';\r\nimport { KeypadButtonData, KeypadConfig } from './types';\r\n\r\n/**\r\n *\r\n * Keypad\r\n *\r\n */\r\nexport default class Keypad {\r\n  // keypad config\r\n  private config: KeypadConfig;\r\n\r\n  /**\r\n   *\r\n   * construct Keypad instance\r\n   *\r\n   */\r\n  constructor(config: KeypadConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Keypad skeleton\r\n   *\r\n   */\r\n  private get skeleton(): HTMLDivElement {\r\n    const keypad = document.createElement('div');\r\n    keypad.id = this.id;\r\n    keypad.classList.add('keypad');\r\n\r\n    // append digits buttons\r\n    KEYPAD_BUTTONS_DATA.forEach((config: KeypadButtonData) => {\r\n      // create button instance\r\n      const btn = new DialpadButton({\r\n        namespace: config.namespace,\r\n        ariaLabel: config.ariaLabel,\r\n        title: config.title,\r\n        subtitle: config.subtitle,\r\n        onClick: this.config.onKeypadBtnClick,\r\n        onLongPress:\r\n          config.title === '0' ? this.config.onZeroBtnLongPress : undefined,\r\n        onLongPressCancel:\r\n          config.title === '0'\r\n            ? this.config.onZeroBtnLongPressCancel\r\n            : undefined,\r\n      });\r\n\r\n      // append button\r\n      btn.build(keypad);\r\n    });\r\n\r\n    // append dummy element\r\n    keypad.appendChild(document.createElement('span'));\r\n\r\n    // append call button\r\n    keypad.appendChild(this.callButton);\r\n\r\n    // append backspace button\r\n    keypad.appendChild(this.backspaceButton);\r\n\r\n    return keypad;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  getMaterialIcon(iconName: string) {\r\n    const iconElement = document.createElement('span');\r\n    iconElement.className = 'material-symbols-outlined';\r\n    iconElement.innerText = iconName;\r\n    return iconElement;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Keypad call button\r\n   *\r\n   */\r\n  private get callButton(): HTMLElement {\r\n    const callBtn = document.createElement('button');\r\n    callBtn.classList.add('keypad__call-btn');\r\n    callBtn.setAttribute('aria-label', 'call button');\r\n\r\n    // append call icon\r\n    callBtn.appendChild(this.getMaterialIcon('call'));\r\n\r\n    // add click event listener\r\n    callBtn.addEventListener('click', this.config.onCallBtnClick);\r\n\r\n    return callBtn;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Keypad backspace button\r\n   *\r\n   */\r\n  private get backspaceButton(): HTMLElement {\r\n    const backspaceBtn = document.createElement('button');\r\n    backspaceBtn.classList.add('keypad__backspace-btn');\r\n    backspaceBtn.setAttribute('aria-label', 'Backspace button');\r\n    backspaceBtn.disabled = true;\r\n\r\n    // append backspace icon\r\n    backspaceBtn.appendChild(this.getMaterialIcon('backspace'));\r\n\r\n    // add click event listener\r\n    backspaceBtn.addEventListener('click', this.config.onBackspaceBtnClick);\r\n\r\n    // apply long press event\r\n    LongPressEvent.apply({\r\n      target: backspaceBtn,\r\n      onLongPressCallback: this.config.onBackspaceBtnLongPress,\r\n    });\r\n\r\n    return backspaceBtn;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * To get backspace button element for dom manipulations\r\n   *\r\n   */\r\n  get backspaceButtonElement(): HTMLButtonElement {\r\n    return this.querySelector.querySelector(\r\n      '.keypad__backspace-btn'\r\n    ) as HTMLButtonElement;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Unique id for keypad\r\n   *\r\n   */\r\n  get id() {\r\n    return `keypad-${this.config.namespace}`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Keypad query selector for dom manipulation\r\n   *\r\n   */\r\n  get querySelector(): HTMLDivElement {\r\n    return document.getElementById(this.id)! as HTMLDivElement;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Appends keypad to a specified parent element.\r\n   *\r\n   * @param parentElement\r\n   *\r\n   */\r\n  build(parentElement: HTMLElement) {\r\n    parentElement.appendChild(this.skeleton);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Enable backspace button\r\n   *\r\n   */\r\n  enableBackspaceButton() {\r\n    this.backspaceButtonElement.disabled = false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Disable backspace button\r\n   *\r\n   */\r\n  disableBackspaceButton() {\r\n    this.backspaceButtonElement.disabled = true;\r\n  }\r\n}\r\n","import Dialpad from './pages/dialpad';\r\n\r\nwindow.onload = () => {\r\n  // create dialpad instance\r\n  const dialpad = new Dialpad({ namespace: 'demo' });\r\n\r\n  // build dialpad\r\n  dialpad.build(document.body);\r\n};\r\n","import InputElement from '../components/forms/inputs';\r\nimport Keypad from '../layout/keypad';\r\nimport DialpadConfig from './types';\r\n\r\n/**\r\n *\r\n * Dialpad Page\r\n *\r\n */\r\nexport default class Dialpad {\r\n  // dialpad configuration\r\n  private config: DialpadConfig;\r\n\r\n  // input field instance\r\n  private inputField!: InputElement;\r\n\r\n  // keypad instance\r\n  private keypad!: Keypad;\r\n\r\n  // recent call number\r\n  private recentCallOnNumber?: string;\r\n\r\n  /**\r\n   *\r\n   * construct Dialpad instance\r\n   *\r\n   */\r\n  constructor(config: DialpadConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * page skeleton\r\n   *\r\n   * @returns {HTMLDivElement}\r\n   *\r\n   */\r\n  private skeleton(): HTMLElement {\r\n    const dialpad = document.createElement('section');\r\n    dialpad.id = this.id;\r\n    dialpad.className = 'dialpad';\r\n\r\n    // build input field\r\n    this.inputFieldLayout.build(dialpad);\r\n\r\n    // build keypad layout\r\n    this.keypadLayout.build(dialpad);\r\n\r\n    return dialpad;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * To get Input Element\r\n   *\r\n   */\r\n  private get inputFieldLayout(): InputElement {\r\n    this.inputField = new InputElement({\r\n      namespace: this.config.namespace,\r\n      onValueEmpty: () => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('disable backspace button');\r\n        this.keypad.disableBackspaceButton();\r\n      },\r\n      onValueNonEmpty: () => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('enable backspace button');\r\n        this.keypad.enableBackspaceButton();\r\n      },\r\n    });\r\n    return this.inputField;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * To get Keypad Layout\r\n   *\r\n   */\r\n  private get keypadLayout() {\r\n    this.keypad = new Keypad({\r\n      namespace: this.config.namespace,\r\n      onKeypadBtnClick: (value: string) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('clicked on button', value);\r\n\r\n        // insert value\r\n        this.inputField.insertValue(value);\r\n        this.keypad.enableBackspaceButton();\r\n      },\r\n      onZeroBtnLongPress: (value: string) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('long pressed on zero button');\r\n\r\n        // insert zero button subtitle value `+`\r\n        this.inputField.replaceValue(value);\r\n      },\r\n      onZeroBtnLongPressCancel: () => {\r\n        // focus input field\r\n        this.inputField.focus();\r\n      },\r\n      onCallBtnClick: () => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('clicked on call button');\r\n\r\n        // check whether try to call on recent number\r\n        if (\r\n          this.inputField.value === '' &&\r\n          this.recentCallOnNumber !== undefined\r\n        ) {\r\n          // eslint-disable-next-line no-console\r\n          console.log('fill last call on number in input field value');\r\n          this.inputField.value = this.recentCallOnNumber;\r\n          this.inputField.focus();\r\n          this.keypad.enableBackspaceButton();\r\n        } else {\r\n          // update last call on number\r\n          this.recentCallOnNumber = this.inputField.value;\r\n\r\n          // eslint-disable-next-line no-console\r\n          console.log('placing call on ', this.inputField.value);\r\n        }\r\n      },\r\n      onBackspaceBtnClick: () => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('clicked on clear button');\r\n        this.inputField.removeValue();\r\n      },\r\n      onBackspaceBtnLongPress: () => {\r\n        // eslint-disable-next-line no-console\r\n        console.log('long press on backspace button');\r\n\r\n        // clear input value and hide backspace button\r\n        this.inputField.value = '';\r\n        this.inputField.focus();\r\n        this.keypad.disableBackspaceButton();\r\n      },\r\n    });\r\n\r\n    return this.keypad;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Unique id for page\r\n   *\r\n   * @returns {string}\r\n   *\r\n   */\r\n  get id(): string {\r\n    return `dialpad-${this.config.namespace}`;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * querySelect for app\r\n   *\r\n   * @returns {HTMLElement}\r\n   *\r\n   */\r\n  get element(): HTMLElement {\r\n    return document.getElementById(this.id)!;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Remove dialpad skeleton from dom\r\n   *\r\n   */\r\n  destroy(): void {\r\n    this.element.remove();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Append dialpad skeleton into parent element\r\n   *\r\n   * @param parentElement {HTMLElement}\r\n   */\r\n  build(parentElement: HTMLElement) {\r\n    parentElement.appendChild(this.skeleton());\r\n  }\r\n}\r\n","import LongPressEventConfig from './types';\r\n\r\n/**\r\n *\r\n * LongPress event\r\n *\r\n */\r\nexport default class LongPressEvent {\r\n  // target html element\r\n  private config: LongPressEventConfig;\r\n\r\n  // state to detect press and hold\r\n  private isHeld: boolean = false;\r\n\r\n  // setTimeout Id\r\n  private activeHoldTimeoutId: number | null = null;\r\n\r\n  // long press timeout in milliseconds\r\n  private longPressTimeout = 500;\r\n\r\n  /**\r\n   *\r\n   * construct LongPressEvent instance and add event listener\r\n   *\r\n   */\r\n  constructor(config: LongPressEventConfig) {\r\n    this.config = config;\r\n\r\n    // start timer\r\n    this.config.target.addEventListener(\r\n      'mousedown',\r\n      this.onHoldStart.bind(this)\r\n    );\r\n    this.config.target.addEventListener(\r\n      'touchstart',\r\n      this.onHoldStart.bind(this)\r\n    );\r\n\r\n    // stop timer\r\n    this.config.target.addEventListener('mouseup', this.onHoldEnd.bind(this));\r\n    this.config.target.addEventListener('mouseout', this.onHoldEnd.bind(this));\r\n    this.config.target.addEventListener(\r\n      'mouseleave',\r\n      this.onHoldEnd.bind(this)\r\n    );\r\n    this.config.target.addEventListener('touchend', this.onHoldEnd.bind(this));\r\n    this.config.target.addEventListener(\r\n      'touchcancel',\r\n      this.onHoldEnd.bind(this)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * start set timeout timer on long press event for callback execution\r\n   *\r\n   */\r\n  private onHoldStart() {\r\n    // eslint-disable-next-line no-console\r\n    console.log('Start Pressing');\r\n    this.isHeld = true;\r\n\r\n    // call on press start handler\r\n    if (this.config.onPressStart) {\r\n      this.config.onPressStart();\r\n    }\r\n\r\n    this.activeHoldTimeoutId = window.setTimeout(() => {\r\n      if (this.isHeld === true) {\r\n        // eslint-disable-next-line no-console\r\n        console.log('long press detected');\r\n        this.config.onLongPressCallback();\r\n      }\r\n    }, this.longPressTimeout);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * clear set timeout timer on long press event\r\n   *\r\n   */\r\n  private onHoldEnd() {\r\n    // eslint-disable-next-line no-console\r\n    console.log('Stop Pressing');\r\n    this.isHeld = false;\r\n\r\n    // call on press start handler\r\n    if (this.config.onLongPressCancel) {\r\n      this.config.onLongPressCancel();\r\n    }\r\n\r\n    if (this.activeHoldTimeoutId !== null) {\r\n      window.clearTimeout(this.activeHoldTimeoutId);\r\n      this.activeHoldTimeoutId = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Apply long press event without using `new` keyword\r\n   *\r\n   */\r\n  static apply(config: LongPressEventConfig) {\r\n    // eslint-disable-next-line no-new\r\n    new LongPressEvent(config);\r\n  }\r\n}\r\n\r\n// Example how to use\r\n// window.onload = () => {\r\n//   // const demoButton = document.querySelector('button');\r\n//   // Using new keyword\r\n//   // new ClickAndHold(demoButton, () => {\r\n//   //     console.log('Long Press');\r\n//   //     alert('Long Press Detected');\r\n//   // });\r\n//   // // Without using new keyword\r\n//   // ClickAndHold.apply(demoButton, () => {\r\n//   //   console.log('Long Press');\r\n//   //   alert('Long Press Detected');\r\n//   // });\r\n// };\r\n"]}